{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","handleSubmit","e","preventDefault","trim","length","cats","onSubmit","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","state","loading","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACTC,mBAAU,IADD,mBACtCC,EADsC,KAC1BC,EAD0B,KAMtCC,EAAe,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAQtB,OACI,6BACI,0BAAMO,SAAYN,GACd,2BACAO,KAAO,OACPC,MAAOV,EACPW,SArBc,SAACR,GACvBF,EAAcE,EAAES,OAAOF,UAsBf,4BAAQD,KAAK,SAASD,SAAUN,GAAhC,c,uBC7BCW,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAMbC,EANa,iDAMoCC,UAAUH,GAN9C,+DAOAI,MAAMF,GAPN,cAObG,EAPa,gBAQIA,EAAKC,OART,uBAQXC,EARW,EAQXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAQ,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAdvB,kBAkBZM,GAlBY,4CAAH,sDCEXO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAEnB,yBAAMgB,UAAY,mBACd,yBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,+BAAKA,EAAL,OCFCS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAGfsB,ECLkB,SAACtB,GAAc,IAAD,EACZf,mBAAS,CAC/BsB,KAAM,GACNgB,SAAQ,IAH0B,mBAC/BD,EAD+B,KACxBE,EADwB,KAgBtC,OAVAC,qBAAW,WACP1B,EAASC,GACR0B,MAAK,SAAAC,GACFH,EAAS,CACLjB,KAAMoB,EACNJ,SAAS,SAGlB,CAACvB,IAEGsB,EDXOM,CAAa5B,GAQ3B,OANAgB,QAAQC,IAAIK,GACZN,QAAQC,IAAI,+BACZD,QAAQC,IAAI,0BACZD,QAAQC,IAAIK,EAAMf,MAClBS,QAAQC,IAAI,kCACZD,QAAQC,IAAIK,EAAMC,SAEd,6BACI,gCAAOvB,EAAP,KAGCsB,EAAMC,SAAW,sCAClB,yBAAKL,UAAY,aAETI,EAAMf,KAAKE,KAAI,SAAAC,GAAG,OACd,kBAAC,EAAD,eACImB,IAAOnB,EAAIC,IACPD,UEvBnBoB,EAAe,WAAO,IAAD,EACM7C,mBAAS,CAAC,cADhB,mBACvB8C,EADuB,KACX/C,EADW,KAI9B,OADAgC,QAAQC,IAAIc,GAER,6BACI,8CACA,kBAAC,EAAD,CAAa/C,cAAeA,IAC5B,6BAEA,4BAQQ+C,EAAWtB,KAAI,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACK6B,IAAK7B,EACLA,SAAYA,U,MClBxCgC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.5797059f.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const[inputValue, setInputValue] = useState ('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue, ...cats,]);\r\n            setInputValue('');\r\n        }\r\n    };\r\n\r\n    AddCategory.propTypes = {\r\n        setCategories: PropTypes.func.isRequired,\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit = {handleSubmit}>\r\n                <input \r\n                type = \"text\"\r\n                value={inputValue}\r\n                onChange = {handleInputChange}\r\n                />   \r\n                <button type='submit' onSubmit={handleSubmit}> Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","    export const getGifs = async (category) => {\r\n\r\n\r\n        // de momento ponemos la url completa y hardcodeada\r\n        //const url = 'https://api.giphy.com/v1/gifs/search?q=Rick and Morty&limit=10&api_key=0OP57vsrM6fx8yAaCBjwuh8lTQ62TrNS';\r\n        // la url definitiva, sin hardcodear:\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=0OP57vsrM6fx8yAaCBjwuh8lTQ62TrNS`;\r\n        const resp = await fetch(url);\r\n        const { data } = await resp.json();\r\n\r\n        const gifs = data.map(img => {\r\n            return ({\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            })\r\n        })\r\n\r\n        return(gifs);\r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    console.log(id, title, url);\r\n    return (\r\n        < div className = 'animate__fadeIn' >\r\n            <img src={url} alt={title} />\r\n            <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {useFetchGifs} from '../hooks/useFetchGifs';\r\nimport {GifGridItem} from './GifGridItem';\r\n// import {getGifs} from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    // const [images, setImages] = useState([]); // arreglo vacío por defecto\r\n\r\n    const state = useFetchGifs(category);\r\n\r\n    console.log(state);\r\n    console.log('El valor de state.data es: ');\r\n    console.log('El valor de state es: ');\r\n    console.log(state.data);\r\n    console.log('El valor de state.loading es: ');\r\n    console.log(state.loading);\r\n    return (\r\n        <div>\r\n            <h3> { category } </h3>\r\n            {/* // Antes */}\r\n            {/* {state.loading ? 'Loading...' : 'Data cargada'} */}\r\n            {state.loading && <p>Loading</p>}\r\n            <div className = 'card-grid'>\r\n                {\r\n                    state.data.map(img => (\r\n                        <GifGridItem \r\n                            key = {img.id} \r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }                 \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import { useState, useEffect } from 'react';\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading:true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category)\r\n        .then(imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n        })\r\n    }, [category]);\r\n\r\n    return state; //{data: [], loading:true}\r\n}\r\n","import React, {useState} from 'react';\r\nimport {AddCategory} from './Components/AddCategory';\r\nimport {GifGrid} from './Components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    console.log(categories);\r\n    return (\r\n        <div>\r\n            <h2> GifExpertApp </h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    // Así estaba antes: sin llamar al componente, sino manejando directamente al array\r\n                    // categories.map(category => {\r\n                    //     return <li key={category} > {category} </li>\r\n                    // })\r\n                    \r\n                    // al llamar al componente , se elimina el return, ya que lo tiene el componente\r\n                    categories.map(category => \r\n                       <GifGrid \r\n                            key={category} //el key hace falta porque el ol requiere una key\r\n                            category = {category} \r\n                       />\r\n                    )\r\n                }\r\n\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}